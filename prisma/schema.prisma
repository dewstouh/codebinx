// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/zod/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Bin {
  id          String    @id @default(cuid()) 
  binId       String    @unique
  title       String
  description String?
  content     String
  language    String
  views       Int?      @default(0)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isPrivate   Boolean
  password    String?
  authorClerkId    String?
  author      User?     @relation("UserBins", fields: [authorClerkId], references: [clerkUserId], onDelete: Cascade)
}

model User {
  id          String    @id @default(cuid())
  clerkUserId String    @unique
  email       String    @unique
  username    String?
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  bins     Bin[]     @relation("UserBins")
  comments Comment[] @relation("UserComments")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  authorClerkId String
  author   User   @relation("UserComments", fields: [authorClerkId], references: [clerkUserId], onDelete: Cascade)

  targetType CommentTargetType
  targetId   String

  @@index([targetType, targetId])
}

enum CommentTargetType {
  bin
  profile
}
