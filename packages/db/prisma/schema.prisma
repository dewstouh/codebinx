generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../../schemas/generated"
  createRelationValuesTypes = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Bin {
  id          String    @id @default(cuid())
  binId       String    @unique
  title       String
  description String?
  content     String
  language    String
  views       Int       @default(0)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPrivate   Boolean   @default(false)
  password    String?

  authorId String?
  author   User?   @relation("UserBins", fields: [authorId], references: [clerkUserId], onDelete: Cascade)
}

model User {
  clerkUserId String   @id @unique
  email       String   @unique
  username    String   @unique
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bins     Bin[]     @relation("UserBins")
  comments Comment[] @relation("UserComments")
  reports  Report[]  @relation("UserReports")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  authorId String
  author   User   @relation("UserComments", fields: [authorId], references: [clerkUserId], onDelete: Cascade)

  targetId   String
  targetType CommentTargetType

  @@index([targetType, targetId])
}

enum CommentTargetType {
  bin
  profile
}

model Report {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation("UserReports", fields: [authorId], references: [clerkUserId], onDelete: Cascade)

  targetType ReportTargetType
  targetId   String

  @@index([targetType, targetId])
}

enum ReportTargetType {
  bin
  user
  comment
}
